GGP: an IDL library to produce plots using gnuplot.
---------------------------------------------------

GGP allows to use gnuplot as a backend to produce graphics on both
screen and PDF files.

GGP is part of GLIB, see https://github.com/gcalderone/glib for
installation instructions.  **GLIB** is free software: you can
redistribute it and/or modify it under the terms of the GPL (see the
COPYING file for more details).

GGP and GLIB have been developed by Giorgio Calderone
(giorgio.calderone@gmail.com).


***

GGP development began before the New Graphics system for IDL was
released, and continued during the first years when New Graphics
system was available, since gnuplot was more stable, feature-rich and
easy to use (according to my knowledge).

To produce a plot using GGP the user will insert: (i) the data to be
plotted, (ii) the gnuplot commands and (iii) the plotting options
(i.e. the arguments to the "plot" and "splot" gnuplot commands) into
the GGP internal buffer.  Then the "ggp" procedure will write a
temporary file as simple text, and spawn a gnuplot process passing the
temporary file name as argument.  The "-persist" option is also passed
to gnuplot to allow the user to interact with the gnuplot window after
the process terminated.  Clearly, it is also possible to use any of
the available gnuplot terminals to produce plots on a file.

Although this is clearly not an efficient way to produce plots the
performance loss is barely noticeable with modern days computers.

By default the temporary file (containing both data and commands in a
clear text format) is automatically deleted, but it is possible to
disable this option and save the file as an "unprocessed" plot, and
possibly modify it in a later time without even using IDL.

The main GGP routines are:

 - "ggp_clear": to initialize a new plotting session;

 - "ggp_cmd": to insert gnuplot commands into the GGP internal buffer
   (except "plot" and "splot);

 - "ggp_data": to insert a data set into the GGP internal buffer;

 - "ggp_plot": to insert the plotting options (i.e. the arguments to
   the "plot" and "splot" gnuplot commands) into the GGP internal
   buffer;

 - "ggp": to dump all data into a temporary file and spawn the gnuplot
   process.

In the simplest case when only one data set should be plot, all these
operations can be performed by a single call to "gplot", which
internally calls all the above mentioned procedures.

When multiple data sets are involved "ggp_data" must be called once
for each data sets.  In this case each data set should have a name to
distinguish it from the other.  Such a name can be either given by the
user with the NAME= keyword, or automatically generated by "ggp_data"
and retrieved with the GETNAME= keyword.

The plotting options (i.e. the arguments to the "plot" and "splot"
gnuplot commands) may be given either to "ggp_data" with the PLOT=
keyword, or to "ggp_plot" by specifying the data set name.

The argument to "ggp_plot" can be either: a (array of) string or a
(array of) structure (whose template can be retrieved with the
"ggp_plot_struct" function).  In the first case the string(s) begins
with a data set name, in order to refer to a specific data set.  In
the second case the "name" field of the structure contains the data
set name.

Such architecture allows to build complex plots as well as complex
plotting procedures, such as "gpp_hist".  The latter function takes
either 1D or 2D arrays as input, uses "ghist" to compute 1D or 2D
histograms, calls "ggp_data" with appropriate data set(s) and return
an array of structure with default plotting options.  These structures
can be optionally modified by the user, or passed directly to
"ggp_plot".

See the "usage_ggp.pro" file for a few examples.

